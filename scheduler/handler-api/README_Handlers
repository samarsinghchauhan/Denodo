# ########################################################################
#                       Scheduler - Samples README                       #
#                      (c) Denodo Technologies - 2014                    #
# ########################################################################

  Important note: For compiling and testing the samples, JDK 1.8 or higher
    is required. The JAVA_HOME environment variable must be correctly set 
    or the JDK bin directory must be in the PATH. 

* Handler Development Sample.
    Denodo Scheduler handlers enable specific actions to be performed upon
    the documents obtained by a data extraction job.
    
    Scheduler can be extended in order to satisfy more specific user needs. 
    New handlers can be added to Scheduler. 
    These system extensions must be added by using the web administration tool 
    (Plugins Management section) and they will be placed at the plugins folder in
    the installation directory. This process must be done in this way (using the web
    administration tool); not copying directly the plugin to the destination folder,
    in order to be automatically detected by Scheduler.
    
    An example of how to create new handlers can be found at 
    %DENODO_HOME%\samples\scheduler\handler-api. The new handler 
    is "XMLCustomHandler". It can take an output file generated by XMLCustomExporter
    (see %DENODO_HOME%\samples\scheduler\exporter-api for details) as an input and
    add the job report and job data information to it. Alternatively, if the handler 
    does not take an input file, it will generate a XML file containing the job
    report and job data information. It can be configured with two parameters:
    
         - "Input file absolute path": The absolute path to the desired
           input file. This parameter is optional.
         - "Output XML file absolute path": The absolute path to the desired
           output file. This parameter is mandatory.

    To compile and generate XMLCustomHandler, please use the following 
    compilation scripts:
      
    + Compilation scripts:
         - compile_handlerexample
         
    + Generate library (jar file) with the handler that will be used
      by Scheduler
         - generate_handlerexample